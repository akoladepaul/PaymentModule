diff --git a/vendor/magento/framework/Search/Adapter/Mysql/Adapter.php b/vendor/magento/framework/Search/Adapter/Mysql/Adapter.php
index 48fedcc..d89b7ea 100644
--- a/vendor/magento/framework/Search/Adapter/Mysql/Adapter.php
+++ b/vendor/magento/framework/Search/Adapter/Mysql/Adapter.php
@@ -71,6 +71,7 @@ class Adapter implements AdapterInterface
 
     /**
      * {@inheritdoc}
+     * @throws \LogicException
      */
     public function query(RequestInterface $request)
     {
diff --git a/vendor/magento/framework/Search/Adapter/Mysql/Aggregation/Builder/Metrics.php b/vendor/magento/framework/Search/Adapter/Mysql/Aggregation/Builder/Metrics.php
index 212ff64..864dfc4 100644
--- a/vendor/magento/framework/Search/Adapter/Mysql/Aggregation/Builder/Metrics.php
+++ b/vendor/magento/framework/Search/Adapter/Mysql/Aggregation/Builder/Metrics.php
@@ -14,7 +14,7 @@ class Metrics
      *
      * @var string[]
      */
-    private $mapMetrics = ['count', 'sum', 'min', 'max', 'avg'];
+    private $allowedMetrics = ['count', 'sum', 'min', 'max', 'avg'];
 
     /**
      * Build metrics for Select->columns
@@ -30,7 +30,7 @@ class Metrics
 
         foreach ($metrics as $metric) {
             $metricType = $metric->getType();
-            if (in_array($metricType, $this->mapMetrics)) {
+            if (in_array($metricType, $this->allowedMetrics, true)) {
                 $selectAggregations[$metricType] = "$metricType(main_table.value)";
             }
         }
diff --git a/vendor/magento/framework/Search/etc/requests.xsd b/vendor/magento/framework/Search/etc/requests.xsd
index 4ad146b..67ce202 100644
--- a/vendor/magento/framework/Search/etc/requests.xsd
+++ b/vendor/magento/framework/Search/etc/requests.xsd
@@ -263,6 +263,7 @@
               <xs:enumeration value="count" />
               <xs:enumeration value="min" />
               <xs:enumeration value="max" />
+              <xs:enumeration value="avg" />
             </xs:restriction>
           </xs:simpleType>
         </xs:attribute>
diff --git a/vendor/magento/module-advanced-catalog/Test/Unit/Model/ResourceModel/Product/Indexer/Eav/SourceTest.php b/vendor/magento/module-advanced-catalog/Test/Unit/Model/ResourceModel/Product/Indexer/Eav/SourceTest.php
index 82cb330..004c219 100644
--- a/vendor/magento/module-advanced-catalog/Test/Unit/Model/ResourceModel/Product/Indexer/Eav/SourceTest.php
+++ b/vendor/magento/module-advanced-catalog/Test/Unit/Model/ResourceModel/Product/Indexer/Eav/SourceTest.php
@@ -71,34 +71,44 @@ class SourceTest extends \PHPUnit_Framework_TestCase
      */
     protected $tableStrategyMock;
 
+    /**
+     * @SuppressWarnings(PHPMD.ExcessiveMethodLength)
+     */
     protected function setUp()
     {
-        $this->selectMock = $this->getMock('Magento\Framework\DB\Select', [], [], '', false);
-        $this->selectMock->expects($this->any())->method('from')->will($this->returnValue($this->selectMock));
-        $this->selectMock->expects($this->any())->method('join')->will($this->returnValue($this->selectMock));
-        $this->selectMock->expects($this->any())->method('joinLeft')->will($this->returnValue($this->selectMock));
-        $this->selectMock->expects($this->any())->method('group')->will($this->returnValue($this->selectMock));
-        $this->selectMock->expects($this->any())->method('where')->will($this->returnValue($this->selectMock));
-
-        $this->connectionMock = $this->getMock('Magento\Framework\DB\Adapter\Pdo\Mysql', [], [], '', false);
+        $this->selectMock = $this->getMock(\Magento\Framework\DB\Select::class, [], [], '', false);
+        $this->selectMock->expects($this->any())->method('from')->will($this->returnSelf());
+        $this->selectMock->expects($this->any())->method('join')->will($this->returnSelf());
+        $this->selectMock->expects($this->any())->method('joinLeft')->will($this->returnSelf());
+        $this->selectMock->expects($this->any())->method('group')->will($this->returnSelf());
+        $this->selectMock->expects($this->any())->method('where')->will($this->returnSelf());
+        $this->selectMock->expects($this->any())->method('columns')->will($this->returnSelf());
+
+        $this->connectionMock = $this->getMock(\Magento\Framework\DB\Adapter\Pdo\Mysql::class, [], [], '', false);
         $this->connectionMock->expects($this->any())->method('select')->willReturn($this->selectMock);
         $this->connectionMock->expects($this->any())->method('describeTable')->willReturn(['column1', 'column2']);
 
-        $this->resourceMock = $this->getMock('Magento\Framework\App\ResourceConnection', [], [], '', false);
+        $this->resourceMock = $this->getMock(\Magento\Framework\App\ResourceConnection::class, [], [], '', false);
         $this->resourceMock->expects($this->any())->method('getConnection')->willReturn($this->connectionMock);
 
-        $this->contextMock = $this->getMock('Magento\Framework\Model\ResourceModel\Db\Context', [], [], '', false);
+        $this->contextMock = $this->getMock(
+            \Magento\Framework\Model\ResourceModel\Db\Context::class,
+            [],
+            [],
+            '',
+            false
+        );
         $this->contextMock->expects($this->once())->method('getResources')->willReturn($this->resourceMock);
 
         $this->attributeMock = $this->getMock(
-            'Magento\Eav\Model\Entity\Attribute\AbstractAttribute',
+            \Magento\Eav\Model\Entity\Attribute\AbstractAttribute::class,
             [],
             [],
             '',
             false
         );
         $this->backendAttributeMock = $this->getMock(
-            'Magento\Eav\Model\Entity\Attribute\Backend\AbstractBackend',
+            \Magento\Eav\Model\Entity\Attribute\Backend\AbstractBackend::class,
             [],
             [],
             '',
@@ -107,13 +117,13 @@ class SourceTest extends \PHPUnit_Framework_TestCase
         $this->attributeMock->expects($this->any())->method('getBackend')
             ->will($this->returnValue($this->backendAttributeMock));
 
-        $this->eavConfigMock = $this->getMock('Magento\Eav\Model\Config', [], [], '', false);
+        $this->eavConfigMock = $this->getMock(\Magento\Eav\Model\Config::class, [], [], '', false);
         $this->eavConfigMock->expects($this->any())->method('getAttribute')->will(
             $this->returnValue($this->attributeMock)
         );
 
         $metadata = $this->getMock(
-            'Magento\Framework\EntityManager\EntityMetadata',
+            \Magento\Framework\EntityManager\EntityMetadata::class,
             [],
             [],
             '',
@@ -121,7 +131,7 @@ class SourceTest extends \PHPUnit_Framework_TestCase
         );
 
         $this->metadataPool = $this->getMock(
-            'Magento\Framework\EntityManager\MetadataPool',
+            \Magento\Framework\EntityManager\MetadataPool::class,
             [],
             [],
             '',
@@ -134,7 +144,7 @@ class SourceTest extends \PHPUnit_Framework_TestCase
             ->willReturn($metadata);
 
         $this->eventManagerMock = $this->getMockForAbstractClass(
-            'Magento\Framework\Event\ManagerInterface',
+            \Magento\Framework\Event\ManagerInterface::class,
             [],
             '',
             false,
@@ -143,12 +153,12 @@ class SourceTest extends \PHPUnit_Framework_TestCase
             ['dispatch']
         );
 
-        $this->helperMock = $this->getMock('Magento\Catalog\Model\ResourceModel\Helper', [], [], '', false);
+        $this->helperMock = $this->getMock(\Magento\Catalog\Model\ResourceModel\Helper::class, [], [], '', false);
 
         $connectionName = 'index';
 
         $this->tableStrategyMock = $this->getMock(
-            'Magento\Framework\Indexer\Table\StrategyInterface',
+            \Magento\Framework\Indexer\Table\StrategyInterface::class,
             [],
             [],
             '',
@@ -184,7 +194,7 @@ class SourceTest extends \PHPUnit_Framework_TestCase
         $this->connectionMock->expects($this->never())->method('createTemporaryTableLike');
         $this->connectionMock->expects($this->never())->method('dropTemporaryTable');
         $this->assertInstanceOf(
-            '\Magento\AdvancedCatalog\Model\ResourceModel\Product\Indexer\Eav\Source',
+            \Magento\AdvancedCatalog\Model\ResourceModel\Product\Indexer\Eav\Source::class,
             $this->_source->reindexAll()
         );
     }
@@ -203,7 +213,7 @@ class SourceTest extends \PHPUnit_Framework_TestCase
         $this->connectionMock->expects($this->atLeastOnce())->method('createTemporaryTableLike');
         $this->connectionMock->expects($this->once())->method('dropTemporaryTable');
         $this->assertInstanceOf(
-            '\Magento\AdvancedCatalog\Model\ResourceModel\Product\Indexer\Eav\Source',
+            \Magento\AdvancedCatalog\Model\ResourceModel\Product\Indexer\Eav\Source::class,
             $this->_source->reindexEntities([1])
         );
     }
diff --git a/vendor/magento/module-catalog-search/Model/Adapter/Mysql/Aggregation/DataProvider.php b/vendor/magento/module-catalog-search/Model/Adapter/Mysql/Aggregation/DataProvider.php
index d4f16f7..0c8c269 100644
--- a/vendor/magento/module-catalog-search/Model/Adapter/Mysql/Aggregation/DataProvider.php
+++ b/vendor/magento/module-catalog-search/Model/Adapter/Mysql/Aggregation/DataProvider.php
@@ -6,6 +6,7 @@
 namespace Magento\CatalogSearch\Model\Adapter\Mysql\Aggregation;
 
 use Magento\Catalog\Model\Product;
+use Magento\CatalogInventory\Model\Stock;
 use Magento\Customer\Model\Session;
 use Magento\Eav\Model\Config;
 use Magento\Framework\App\ResourceConnection;
@@ -79,7 +80,13 @@ class DataProvider implements DataProviderInterface
 
         $select = $this->getSelect();
 
-        if ($attribute->getAttributeCode() == 'price') {
+        $select->joinInner(
+            ['entities' => $entityIdsTable->getName()],
+            'main_table.entity_id  = entities.entity_id',
+            []
+        );
+
+        if ($attribute->getAttributeCode() === 'price') {
             /** @var \Magento\Store\Model\Store $store */
             $store = $this->scopeResolver->getScope($currentScope);
             if (!$store instanceof \Magento\Store\Model\Store) {
@@ -94,19 +101,24 @@ class DataProvider implements DataProviderInterface
             $currentScopeId = $this->scopeResolver->getScope($currentScope)
                 ->getId();
             $table = $this->resource->getTableName(
-                'catalog_product_index_eav' . ($attribute->getBackendType() == 'decimal' ? '_decimal' : '')
+                'catalog_product_index_eav' . ($attribute->getBackendType() === 'decimal' ? '_decimal' : '')
             );
-            $select->from(['main_table' => $table], ['value'])
+            $subSelect = $select;
+            $subSelect->from(['main_table' => $table], ['main_table.value'])
+                ->joinLeft(
+                    ['stock_index' => $this->resource->getTableName('cataloginventory_stock_status')],
+                    'main_table.source_id = stock_index.product_id',
+                    []
+                )
                 ->where('main_table.attribute_id = ?', $attribute->getAttributeId())
-                ->where('main_table.store_id = ? ', $currentScopeId);
+                ->where('main_table.store_id = ? ', $currentScopeId)
+                ->where('stock_index.stock_status = ?', Stock::STOCK_IN_STOCK)
+                ->group(['main_table.entity_id', 'main_table.value']);
+            $parentSelect = $this->getSelect();
+            $parentSelect->from(['main_table' => $subSelect], ['main_table.value']);
+            $select = $parentSelect;
         }
 
-        $select->joinInner(
-            ['entities' => $entityIdsTable->getName()],
-            'main_table.entity_id  = entities.entity_id',
-            []
-        );
-
         return $select;
     }
 
diff --git a/vendor/magento/module-catalog-search/Model/Adapter/Mysql/Filter/AliasResolver.php b/vendor/magento/module-catalog-search/Model/Adapter/Mysql/Filter/AliasResolver.php
new file mode 100644
index 0000000..8f5a231
--- /dev/null
+++ b/vendor/magento/module-catalog-search/Model/Adapter/Mysql/Filter/AliasResolver.php
@@ -0,0 +1,44 @@
+<?php
+/**
+ * Copyright © 2013-2017 Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+namespace Magento\CatalogSearch\Model\Adapter\Mysql\Filter;
+
+
+use Magento\CatalogSearch\Model\Search\RequestGenerator;
+
+/**
+ * Purpose of class is to resolve table alias for Search Request filter
+ */
+class AliasResolver
+{
+    /**
+     * The suffix for stock status filter that may be added to the query beside the filter query
+     * Used when showing of Out of Stock products is disabled.
+     */
+    const STOCK_FILTER_SUFFIX = '_stock';
+
+    /**
+     * @param \Magento\Framework\Search\Request\FilterInterface $filter
+     * @return string alias of the filter in database
+     */
+    public function getAlias(\Magento\Framework\Search\Request\FilterInterface $filter)
+    {
+        $alias = null;
+        $field = $filter->getField();
+        switch ($field) {
+            case 'price':
+                $alias = 'price_index';
+                break;
+            case 'category_ids':
+                $alias = 'category_ids_index';
+                break;
+            default:
+                $alias = $field . RequestGenerator::FILTER_SUFFIX;
+                break;
+        }
+        return $alias;
+    }
+}
diff --git a/vendor/magento/module-catalog-search/Model/Adapter/Mysql/Filter/Preprocessor.php b/vendor/magento/module-catalog-search/Model/Adapter/Mysql/Filter/Preprocessor.php
index 63a98b3..865432f 100644
--- a/vendor/magento/module-catalog-search/Model/Adapter/Mysql/Filter/Preprocessor.php
+++ b/vendor/magento/module-catalog-search/Model/Adapter/Mysql/Filter/Preprocessor.php
@@ -8,8 +8,11 @@ namespace Magento\CatalogSearch\Model\Adapter\Mysql\Filter;
 use Magento\Catalog\Api\Data\ProductInterface;
 use Magento\Catalog\Model\Product;
 use Magento\Catalog\Model\ResourceModel\Eav\Attribute;
+use Magento\CatalogInventory\Model\Stock;
 use Magento\CatalogSearch\Model\Search\TableMapper;
 use Magento\Eav\Model\Config;
+use Magento\Framework\App\Config\ScopeConfigInterface;
+use Magento\Framework\App\ObjectManager;
 use Magento\Framework\App\ResourceConnection;
 use Magento\Framework\App\ScopeResolverInterface;
 use Magento\Framework\DB\Adapter\AdapterInterface;
@@ -17,6 +20,7 @@ use Magento\Framework\EntityManager\MetadataPool;
 use Magento\Framework\Search\Adapter\Mysql\ConditionManager;
 use Magento\Framework\Search\Adapter\Mysql\Filter\PreprocessorInterface;
 use Magento\Framework\Search\Request\FilterInterface;
+use Magento\Store\Model\ScopeInterface;
 use Magento\Store\Model\Store;
 
 /**
@@ -60,9 +64,14 @@ class Preprocessor implements PreprocessorInterface
     private $metadataPool;
 
     /**
-     * @var TableMapper
+     * @var ScopeConfigInterface
      */
-    private $tableMapper;
+    private $scopeConfig;
+
+    /**
+     * @var AliasResolver
+     */
+    private $aliasResolver;
 
     /**
      * @param ConditionManager $conditionManager
@@ -71,6 +80,9 @@ class Preprocessor implements PreprocessorInterface
      * @param ResourceConnection $resource
      * @param TableMapper $tableMapper
      * @param string $attributePrefix
+     * @param ScopeConfigInterface $scopeConfig
+     * @param AliasResolver $aliasResolver
+     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
      */
     public function __construct(
         ConditionManager $conditionManager,
@@ -78,7 +90,9 @@ class Preprocessor implements PreprocessorInterface
         Config $config,
         ResourceConnection $resource,
         TableMapper $tableMapper,
-        $attributePrefix
+        $attributePrefix,
+        ScopeConfigInterface $scopeConfig = null,
+        AliasResolver $aliasResolver = null
     ) {
         $this->conditionManager = $conditionManager;
         $this->scopeResolver = $scopeResolver;
@@ -86,7 +100,8 @@ class Preprocessor implements PreprocessorInterface
         $this->resource = $resource;
         $this->connection = $resource->getConnection();
         $this->attributePrefix = $attributePrefix;
-        $this->tableMapper = $tableMapper;
+        $this->scopeConfig = $scopeConfig ?: ObjectManager::getInstance()->get(ScopeConfigInterface::class);
+        $this->aliasResolver = $aliasResolver ?: ObjectManager::getInstance()->get(AliasResolver::class);
     }
 
     /**
@@ -117,7 +132,7 @@ class Preprocessor implements PreprocessorInterface
         } elseif ($filter->getField() === 'category_ids') {
             return 'category_ids_index.category_id = ' . (int) $filter->getValue();
         } elseif ($attribute->isStatic()) {
-            $alias = $this->tableMapper->getMappingAlias($filter);
+            $alias = $this->aliasResolver->getAlias($filter);
             $resultQuery = str_replace(
                 $this->connection->quoteIdentifier($attribute->getAttributeCode()),
                 $this->connection->quoteIdentifier($alias . '.' . $attribute->getAttributeCode()),
@@ -208,7 +223,7 @@ class Preprocessor implements PreprocessorInterface
      */
     private function processTermSelect(FilterInterface $filter, $isNegation)
     {
-        $alias = $this->tableMapper->getMappingAlias($filter);
+        $alias = $this->aliasResolver->getAlias($filter);
         if (is_array($filter->getValue())) {
             $value = sprintf(
                 '%s IN (%s)',
@@ -224,10 +239,32 @@ class Preprocessor implements PreprocessorInterface
             $value
         );
 
+        if ($this->isAddStockFilter()) {
+            $resultQuery = sprintf(
+                '%1$s AND %2$s%3$s.stock_status = %4$s',
+                $resultQuery,
+                $alias,
+                AliasResolver::STOCK_FILTER_SUFFIX,
+                Stock::STOCK_IN_STOCK
+            );
+        }
+
         return $resultQuery;
     }
 
     /**
+     * @return bool
+     */
+    private function isAddStockFilter()
+    {
+        $isShowOutOfStock = $this->scopeConfig->isSetFlag(
+            'cataloginventory/options/show_out_of_stock',
+            ScopeInterface::SCOPE_STORE
+        );
+        return false === $isShowOutOfStock;
+    }
+
+    /**
      * Get product metadata pool
      *
      * @return \Magento\Framework\EntityManager\MetadataPool
diff --git a/vendor/magento/module-catalog-search/Model/Search/FilterMapper/ExclusionStrategy.php b/vendor/magento/module-catalog-search/Model/Search/FilterMapper/ExclusionStrategy.php
new file mode 100644
index 0000000..9575f6e
--- /dev/null
+++ b/vendor/magento/module-catalog-search/Model/Search/FilterMapper/ExclusionStrategy.php
@@ -0,0 +1,83 @@
+<?php
+/**
+ * Copyright © 2013-2017 Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+namespace Magento\CatalogSearch\Model\Search\FilterMapper;
+
+use Magento\CatalogSearch\Model\Adapter\Mysql\Filter\AliasResolver;
+
+/**
+ * Strategy which processes exclusions from general rules
+ */
+class ExclusionStrategy implements FilterStrategyInterface
+{
+    /**
+     * @var \Magento\Framework\App\ResourceConnection
+     */
+    private $resourceConnection;
+
+    /**
+     * @var AliasResolver
+     */
+    private $aliasResolver;
+
+    /**
+     * @var \Magento\Store\Model\StoreManagerInterface
+     */
+    private $storeManager;
+
+    /**
+     * @param \Magento\Framework\App\ResourceConnection $resourceConnection
+     * @param \Magento\Store\Model\StoreManagerInterface $storeManager
+     * @param AliasResolver $aliasResolver
+     */
+    public function __construct(
+        \Magento\Framework\App\ResourceConnection $resourceConnection,
+        \Magento\Store\Model\StoreManagerInterface $storeManager,
+        AliasResolver $aliasResolver
+    ) {
+        $this->resourceConnection = $resourceConnection;
+        $this->storeManager = $storeManager;
+        $this->aliasResolver = $aliasResolver;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public function apply(
+        \Magento\Framework\Search\Request\FilterInterface $filter,
+        \Magento\Framework\DB\Select $select
+    ) {
+        $isApplied = false;
+        $field = $filter->getField();
+        if ('price' === $field) {
+            $alias = $this->aliasResolver->getAlias($filter);
+            $tableName = $this->resourceConnection->getTableName('catalog_product_index_price');
+            $select->joinInner(
+                [
+                    $alias => $tableName
+                ],
+                $this->resourceConnection->getConnection()->quoteInto(
+                    'search_index.entity_id = price_index.entity_id AND price_index.website_id = ?',
+                    $this->storeManager->getWebsite()->getId()
+                ),
+                []
+            );
+            $isApplied = true;
+        } elseif ('category_ids' === $field) {
+            $alias = $this->aliasResolver->getAlias($filter);
+            $tableName = $this->resourceConnection->getTableName('catalog_category_product_index');
+            $select->joinInner(
+                [
+                    $alias => $tableName
+                ],
+                'search_index.entity_id = category_ids_index.product_id',
+                []
+            );
+            $isApplied = true;
+        }
+        return $isApplied;
+    }
+}
diff --git a/vendor/magento/module-catalog-search/Model/Search/FilterMapper/FilterContext.php b/vendor/magento/module-catalog-search/Model/Search/FilterMapper/FilterContext.php
new file mode 100644
index 0000000..d8d3efc
--- /dev/null
+++ b/vendor/magento/module-catalog-search/Model/Search/FilterMapper/FilterContext.php
@@ -0,0 +1,100 @@
+<?php
+/**
+ * Copyright © 2013-2017 Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+namespace Magento\CatalogSearch\Model\Search\FilterMapper;
+
+
+use Magento\CatalogSearch\Model\Adapter\Mysql\Filter\AliasResolver;
+use Magento\Eav\Model\Config as EavConfig;
+use Magento\Eav\Model\Entity\Attribute\AbstractAttribute;
+
+/**
+ * FilterContext represents a Context of the Strategy pattern
+ * Its responsibility is to choose appropriate strategy to apply passed filter to the Select
+ */
+class FilterContext implements FilterStrategyInterface
+{
+    /**
+     * @var ExclusionStrategy
+     */
+    private $exclusionStrategy;
+
+    /**
+     * @var EavConfig
+     */
+    private $eavConfig;
+
+    /**
+     * @var TermDropdownStrategy
+     */
+    private $termDropdownStrategy;
+
+    /**
+     * @var StaticAttributeStrategy
+     */
+    private $staticAttributeStrategy;
+
+    /**
+     * @var AliasResolver
+     */
+    private $aliasResolver;
+
+    /**
+     * @param EavConfig $eavConfig
+     * @param AliasResolver $aliasResolver
+     * @param ExclusionStrategy $exclusionStrategy
+     * @param TermDropdownStrategy $termDropdownStrategy
+     * @param StaticAttributeStrategy $staticAttributeStrategy
+     */
+    public function __construct(
+        EavConfig $eavConfig,
+        AliasResolver $aliasResolver,
+        ExclusionStrategy $exclusionStrategy,
+        TermDropdownStrategy $termDropdownStrategy,
+        StaticAttributeStrategy $staticAttributeStrategy
+    ) {
+        $this->eavConfig = $eavConfig;
+        $this->aliasResolver = $aliasResolver;
+        $this->exclusionStrategy = $exclusionStrategy;
+        $this->termDropdownStrategy = $termDropdownStrategy;
+        $this->staticAttributeStrategy = $staticAttributeStrategy;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public function apply(
+        \Magento\Framework\Search\Request\FilterInterface $filter,
+        \Magento\Framework\DB\Select $select
+    ) {
+        $isApplied = $this->exclusionStrategy->apply($filter, $select);
+
+        if (!$isApplied) {
+            $attribute = $this->getAttributeByCode($filter->getField());
+            if ($attribute) {
+                if ($filter->getType() === \Magento\Framework\Search\Request\FilterInterface::TYPE_TERM
+                    && in_array($attribute->getFrontendInput(), ['select', 'multiselect'], true)
+                ) {
+                    $isApplied = $this->termDropdownStrategy->apply($filter, $select);
+                } elseif ($attribute->getBackendType() === AbstractAttribute::TYPE_STATIC) {
+                    $isApplied = $this->staticAttributeStrategy->apply($filter, $select);
+                }
+            }
+        }
+
+        return $isApplied;
+    }
+
+    /**
+     * @param string $field
+     * @return \Magento\Catalog\Model\ResourceModel\Eav\Attribute
+     * @throws \Magento\Framework\Exception\LocalizedException
+     */
+    private function getAttributeByCode($field)
+    {
+        return $this->eavConfig->getAttribute(\Magento\Catalog\Model\Product::ENTITY, $field);
+    }
+}
diff --git a/vendor/magento/module-catalog-search/Model/Search/FilterMapper/FilterStrategyInterface.php b/vendor/magento/module-catalog-search/Model/Search/FilterMapper/FilterStrategyInterface.php
new file mode 100644
index 0000000..92b0615
--- /dev/null
+++ b/vendor/magento/module-catalog-search/Model/Search/FilterMapper/FilterStrategyInterface.php
@@ -0,0 +1,23 @@
+<?php
+/**
+ * Copyright © 2013-2017 Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+namespace Magento\CatalogSearch\Model\Search\FilterMapper;
+
+/**
+ * FilterStrategyInterface provides the interface to work with strategies
+ */
+interface FilterStrategyInterface
+{
+    /**
+     * @param \Magento\Framework\Search\Request\FilterInterface $filter
+     * @param \Magento\Framework\DB\Select $select
+     * @return bool is filter was applied
+     */
+    public function apply(
+        \Magento\Framework\Search\Request\FilterInterface $filter,
+        \Magento\Framework\DB\Select $select
+    );
+}
diff --git a/vendor/magento/module-catalog-search/Model/Search/FilterMapper/StaticAttributeStrategy.php b/vendor/magento/module-catalog-search/Model/Search/FilterMapper/StaticAttributeStrategy.php
new file mode 100644
index 0000000..bb4a18c
--- /dev/null
+++ b/vendor/magento/module-catalog-search/Model/Search/FilterMapper/StaticAttributeStrategy.php
@@ -0,0 +1,74 @@
+<?php
+/**
+ * Copyright © 2013-2017 Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+namespace Magento\CatalogSearch\Model\Search\FilterMapper;
+
+use Magento\CatalogSearch\Model\Adapter\Mysql\Filter\AliasResolver;
+use Magento\Eav\Model\Config as EavConfig;
+
+/**
+ * This strategy handles static attributes
+ */
+class StaticAttributeStrategy implements FilterStrategyInterface
+{
+    /**
+     * @var \Magento\Framework\App\ResourceConnection
+     */
+    private $resourceConnection;
+
+    /**
+     * @var AliasResolver
+     */
+    private $aliasResolver;
+
+    /**
+     * @var EavConfig
+     */
+    private $eavConfig;
+
+    /**
+     * @param \Magento\Framework\App\ResourceConnection $resourceConnection
+     * @param EavConfig $eavConfig
+     * @param AliasResolver $aliasResolver
+     */
+    public function __construct(
+        \Magento\Framework\App\ResourceConnection $resourceConnection,
+        EavConfig $eavConfig,
+        AliasResolver $aliasResolver
+    ) {
+        $this->resourceConnection = $resourceConnection;
+        $this->eavConfig = $eavConfig;
+        $this->aliasResolver = $aliasResolver;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public function apply(
+        \Magento\Framework\Search\Request\FilterInterface $filter,
+        \Magento\Framework\DB\Select $select
+    ) {
+        $attribute = $this->getAttributeByCode($filter->getField());
+        $alias = $this->aliasResolver->getAlias($filter);
+        $select->joinInner(
+            [$alias => $attribute->getBackendTable()],
+            'search_index.entity_id = '
+            . $this->resourceConnection->getConnection()->quoteIdentifier("$alias.entity_id"),
+            []
+        );
+        return true;
+    }
+
+    /**
+     * @param string $field
+     * @return \Magento\Catalog\Model\ResourceModel\Eav\Attribute
+     * @throws \Magento\Framework\Exception\LocalizedException
+     */
+    private function getAttributeByCode($field)
+    {
+        return $this->eavConfig->getAttribute(\Magento\Catalog\Model\Product::ENTITY, $field);
+    }
+}
diff --git a/vendor/magento/module-catalog-search/Model/Search/FilterMapper/TermDropdownStrategy.php b/vendor/magento/module-catalog-search/Model/Search/FilterMapper/TermDropdownStrategy.php
new file mode 100644
index 0000000..bbc0df0
--- /dev/null
+++ b/vendor/magento/module-catalog-search/Model/Search/FilterMapper/TermDropdownStrategy.php
@@ -0,0 +1,128 @@
+<?php
+/**
+ * Copyright © 2013-2017 Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+namespace Magento\CatalogSearch\Model\Search\FilterMapper;
+
+use Magento\CatalogSearch\Model\Adapter\Mysql\Filter\AliasResolver;
+use Magento\Eav\Model\Config as EavConfig;
+use Magento\Framework\App\Config\ScopeConfigInterface;
+use Magento\Framework\App\ResourceConnection;
+use Magento\Store\Model\ScopeInterface;
+use Magento\Store\Model\StoreManagerInterface;
+
+/**
+ * This strategy handles attributes which comply with two criteria:
+ *   - The filter for dropdown or multi-select attribute
+ *   - The filter is Term filter
+ *
+ * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
+ */
+class TermDropdownStrategy implements FilterStrategyInterface
+{
+    /**
+     * @var AliasResolver
+     */
+    private $aliasResolver;
+
+    /**
+     * @var StoreManagerInterface
+     */
+    private $storeManager;
+
+    /**
+     * @var EavConfig
+     */
+    private $eavConfig;
+
+    /**
+     * @var ResourceConnection
+     */
+    private $resourceConnection;
+
+    /**
+     * @var ScopeConfigInterface
+     */
+    private $scopeConfig;
+
+    /**
+     * @param StoreManagerInterface $storeManager
+     * @param ResourceConnection $resourceConnection
+     * @param EavConfig $eavConfig
+     * @param ScopeConfigInterface $scopeConfig
+     * @param AliasResolver $aliasResolver
+     */
+    public function __construct(
+        StoreManagerInterface $storeManager,
+        ResourceConnection $resourceConnection,
+        EavConfig $eavConfig,
+        ScopeConfigInterface $scopeConfig,
+        AliasResolver $aliasResolver
+    ) {
+        $this->storeManager = $storeManager;
+        $this->resourceConnection = $resourceConnection;
+        $this->eavConfig = $eavConfig;
+        $this->scopeConfig = $scopeConfig;
+        $this->aliasResolver = $aliasResolver;
+    }
+
+    /**
+     * {@inheritDoc}
+     * @throws \Magento\Framework\Exception\LocalizedException
+     */
+    public function apply(
+        \Magento\Framework\Search\Request\FilterInterface $filter,
+        \Magento\Framework\DB\Select $select
+    ) {
+        $alias = $this->aliasResolver->getAlias($filter);
+        $attribute = $this->getAttributeByCode($filter->getField());
+        $joinCondition = sprintf(
+            'search_index.entity_id = %1$s.entity_id AND %1$s.attribute_id = %2$d AND %1$s.store_id = %3$d',
+            $alias,
+            $attribute->getId(),
+            $this->storeManager->getWebsite()->getId()
+        );
+        $select->joinLeft(
+            [$alias => $this->resourceConnection->getTableName('catalog_product_index_eav')],
+            $joinCondition,
+            []
+        );
+        if ($this->isAddStockFilter()) {
+            $stockAlias = $alias . AliasResolver::STOCK_FILTER_SUFFIX;
+            $select->joinLeft(
+                [
+                    $stockAlias => $this->resourceConnection->getTableName('cataloginventory_stock_status'),
+                ],
+                sprintf('%2$s.product_id = %1$s.source_id', $alias, $stockAlias),
+                []
+            );
+        }
+
+        return true;
+    }
+
+    /**
+     * @param string $field
+     * @return \Magento\Catalog\Model\ResourceModel\Eav\Attribute
+     * @throws \Magento\Framework\Exception\LocalizedException
+     */
+    private function getAttributeByCode($field)
+    {
+        return $this->eavConfig->getAttribute(\Magento\Catalog\Model\Product::ENTITY, $field);
+    }
+
+    /**
+     * @return bool
+     */
+    private function isAddStockFilter()
+    {
+        $isShowOutOfStock = $this->scopeConfig->isSetFlag(
+            'cataloginventory/options/show_out_of_stock',
+            ScopeInterface::SCOPE_STORE
+        );
+
+        return false === $isShowOutOfStock;
+    }
+}
diff --git a/vendor/magento/module-catalog-search/Model/Search/IndexBuilder.php b/vendor/magento/module-catalog-search/Model/Search/IndexBuilder.php
index 333c44a..0599589 100644
--- a/vendor/magento/module-catalog-search/Model/Search/IndexBuilder.php
+++ b/vendor/magento/module-catalog-search/Model/Search/IndexBuilder.php
@@ -99,6 +99,7 @@ class IndexBuilder implements IndexBuilderInterface
      *
      * @param RequestInterface $request
      * @return Select
+     * @throws \LogicException
      */
     public function build(RequestInterface $request)
     {
@@ -132,7 +133,7 @@ class IndexBuilder implements IndexBuilderInterface
                 ),
                 []
             );
-            $select->where('stock_index.stock_status = ?', Stock::DEFAULT_STOCK_ID);
+            $select->where('stock_index.stock_status = ?', Stock::STOCK_IN_STOCK);
         }
 
         return $select;
diff --git a/vendor/magento/module-catalog-search/Model/Search/TableMapper.php b/vendor/magento/module-catalog-search/Model/Search/TableMapper.php
index fc6c98b..e96c6a3 100644
--- a/vendor/magento/module-catalog-search/Model/Search/TableMapper.php
+++ b/vendor/magento/module-catalog-search/Model/Search/TableMapper.php
@@ -7,7 +7,10 @@
 namespace Magento\CatalogSearch\Model\Search;
 
 use Magento\Catalog\Model\ResourceModel\Product\Attribute\CollectionFactory;
-use Magento\Eav\Model\Entity\Attribute\AbstractAttribute;
+use Magento\CatalogSearch\Model\Adapter\Mysql\Filter\AliasResolver;
+use Magento\CatalogSearch\Model\Search\FilterMapper\FilterStrategyInterface;
+use Magento\Eav\Model\Config as EavConfig;
+use Magento\Framework\App\Config\ScopeConfigInterface;
 use Magento\Framework\App\ResourceConnection as AppResource;
 use Magento\Framework\DB\Select;
 use Magento\Framework\Search\Request\FilterInterface;
@@ -16,14 +19,20 @@ use Magento\Framework\Search\Request\Query\Filter;
 use Magento\Framework\Search\RequestInterface;
 use Magento\Framework\Search\Request\QueryInterface as RequestQueryInterface;
 use Magento\Store\Model\StoreManagerInterface;
+use Magento\Framework\App\ObjectManager;
 
 /**
+ * Responsibility of the TableMapper is to collect all filters from the search query
+ * and pass them one by one for processing in the FilterContext,
+ * which will apply them to the Select
+ *
  * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
+ * @SuppressWarnings(PHPMD.NPathComplexity)
  */
 class TableMapper
 {
     /**
-     * @var Resource
+     * @var AppResource
      */
     private $resource;
 
@@ -33,23 +42,52 @@ class TableMapper
     private $storeManager;
 
     /**
-     * @var \Magento\Catalog\Model\ResourceModel\Product\Attribute\Collection
+     * @var EavConfig
      */
-    private $attributeCollection;
+    private $eavConfig;
+
+    /**
+     * @var ScopeConfigInterface
+     */
+    private $scopeConfig;
+
+    /**
+     * @var FilterStrategyInterface
+     */
+    private $filterStrategy;
+
+    /**
+     * @var AliasResolver
+     */
+    private $aliasResolver;
 
     /**
      * @param AppResource $resource
      * @param StoreManagerInterface $storeManager
      * @param CollectionFactory $attributeCollectionFactory
+     * @param EavConfig $eavConfig
+     * @param ScopeConfigInterface $scopeConfig
+     * @param FilterStrategyInterface $filterStrategy
+     * @param AliasResolver $aliasResolver
+     *
+     * Added for backwards compatibility(can not delete parameter from constructor)
+     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
      */
     public function __construct(
         AppResource $resource,
         StoreManagerInterface $storeManager,
-        CollectionFactory $attributeCollectionFactory
+        CollectionFactory $attributeCollectionFactory,
+        EavConfig $eavConfig = null,
+        ScopeConfigInterface $scopeConfig = null,
+        FilterStrategyInterface $filterStrategy = null,
+        AliasResolver $aliasResolver = null
     ) {
         $this->resource = $resource;
         $this->storeManager = $storeManager;
-        $this->attributeCollection = $attributeCollectionFactory->create();
+        $this->eavConfig = $eavConfig ?: ObjectManager::getInstance()->get(EavConfig::class);
+        $this->scopeConfig = $scopeConfig ?: ObjectManager::getInstance()->get(ScopeConfigInterface::class);
+        $this->filterStrategy = $filterStrategy ?: ObjectManager::getInstance()->get(FilterStrategyInterface::class);
+        $this->aliasResolver = $aliasResolver ?: ObjectManager::getInstance()->get(AliasResolver::class);
     }
 
     /**
@@ -59,95 +97,54 @@ class TableMapper
      */
     public function addTables(Select $select, RequestInterface $request)
     {
-        $mappedTables = [];
-        $filters = $this->getFilters($request->getQuery());
+        $appliedFilters = [];
+        $filters = $this->getFiltersFromQuery($request->getQuery());
         foreach ($filters as $filter) {
-            list($alias, $table, $mapOn, $mappedFields) = $this->getMappingData($filter);
-            if (!array_key_exists($alias, $mappedTables)) {
-                $select->joinLeft(
-                    [$alias => $table],
-                    $mapOn,
-                    $mappedFields
-                );
-                $mappedTables[$alias] = $table;
+            $alias = $this->aliasResolver->getAlias($filter);
+            if (!array_key_exists($alias, $appliedFilters)) {
+                $isApplied = $this->filterStrategy->apply($filter, $select);
+                if ($isApplied) {
+                    $appliedFilters[$alias] = true;
+                }
             }
         }
+
         return $select;
     }
 
     /**
+     * This method is deprecated.
+     * Please use \Magento\CatalogSearch\Model\Adapter\Mysql\Filter\AliasResolver::getAlias() instead.
+     *
+     * @deprecated
+     * @see AliasResolver::getAlias()
+     *
      * @param FilterInterface $filter
      * @return string
      */
     public function getMappingAlias(FilterInterface $filter)
     {
-        list($alias) = $this->getMappingData($filter);
-        return $alias;
-    }
-
-    /**
-     * Returns mapping data for field in format: [
-     *  'table_alias',
-     *  'table',
-     *  'join_condition',
-     *  ['fields']
-     * ]
-     * @param FilterInterface $filter
-     * @return array
-     */
-    private function getMappingData(FilterInterface $filter)
-    {
-        $alias = null;
-        $table = null;
-        $mapOn = null;
-        $mappedFields = null;
-        $field = $filter->getField();
-        $fieldToTableMap = $this->getFieldToTableMap($field);
-        if ($fieldToTableMap) {
-            list($alias, $table, $mapOn, $mappedFields) = $fieldToTableMap;
-            $table = $this->resource->getTableName($table);
-        } elseif ($attribute = $this->getAttributeByCode($field)) {
-            if ($filter->getType() === FilterInterface::TYPE_TERM
-                && in_array($attribute->getFrontendInput(), ['select', 'multiselect'], true)
-            ) {
-                $table = $this->resource->getTableName('catalog_product_index_eav');
-                $alias = $field . RequestGenerator::FILTER_SUFFIX;
-                $mapOn = sprintf(
-                    'search_index.entity_id = %1$s.entity_id AND %1$s.attribute_id = %2$d AND %1$s.store_id = %3$d',
-                    $alias,
-                    $attribute->getId(),
-                    $this->getStoreId()
-                );
-                $mappedFields = [];
-            } elseif ($attribute->getBackendType() === AbstractAttribute::TYPE_STATIC) {
-                $table = $attribute->getBackendTable();
-                $alias = $field . RequestGenerator::FILTER_SUFFIX;
-                $mapOn = 'search_index.entity_id = ' . $alias . '.entity_id';
-                $mappedFields = null;
-            }
-        }
-
-        return [$alias, $table, $mapOn, $mappedFields];
+        return $this->aliasResolver->getAlias($filter);
     }
 
     /**
      * @param RequestQueryInterface $query
      * @return FilterInterface[]
      */
-    private function getFilters($query)
+    private function getFiltersFromQuery(RequestQueryInterface $query)
     {
         $filters = [];
         switch ($query->getType()) {
             case RequestQueryInterface::TYPE_BOOL:
                 /** @var \Magento\Framework\Search\Request\Query\BoolExpression $query */
                 foreach ($query->getMust() as $subQuery) {
-                    $filters = array_merge($filters, $this->getFilters($subQuery));
+                    $filters = array_merge($filters, $this->getFiltersFromQuery($subQuery));
                 }
                 foreach ($query->getShould() as $subQuery) {
-                    $filters = array_merge($filters, $this->getFilters($subQuery));
+                    $filters = array_merge($filters, $this->getFiltersFromQuery($subQuery));
                 }
                 foreach ($query->getMustNot() as $subQuery) {
-                    $filters = array_merge($filters, $this->getFilters($subQuery));
+                    $filters = array_merge($filters, $this->getFiltersFromQuery($subQuery));
                 }
                 break;
             case RequestQueryInterface::TYPE_FILTER:
@@ -162,6 +159,7 @@ class TableMapper
             default:
                 break;
         }
+
         return $filters;
     }
 
@@ -196,56 +194,4 @@ class TableMapper
         }
         return $filters;
     }
-
-    /**
-     * @return int
-     */
-    private function getWebsiteId()
-    {
-        return $this->storeManager->getWebsite()->getId();
-    }
-
-    /**
-     * @return int
-     */
-    private function getStoreId()
-    {
-        return $this->storeManager->getStore()->getId();
-    }
-
-    /**
-     * @param string $field
-     * @return array|null
-     */
-    private function getFieldToTableMap($field)
-    {
-        $fieldToTableMap = [
-            'price' => [
-                'price_index',
-                'catalog_product_index_price',
-                $this->resource->getConnection()->quoteInto(
-                    'search_index.entity_id = price_index.entity_id AND price_index.website_id = ?',
-                    $this->getWebsiteId()
-                ),
-                []
-            ],
-            'category_ids' => [
-                'category_ids_index',
-                'catalog_category_product_index',
-                'search_index.entity_id = category_ids_index.product_id',
-                []
-            ]
-        ];
-        return array_key_exists($field, $fieldToTableMap) ? $fieldToTableMap[$field] : null;
-    }
-
-    /**
-     * @param string $field
-     * @return \Magento\Catalog\Model\ResourceModel\Eav\Attribute
-     */
-    private function getAttributeByCode($field)
-    {
-        $attribute = $this->attributeCollection->getItemByColumnValue('attribute_code', $field);
-        return $attribute;
-    }
 }
diff --git a/vendor/magento/module-catalog-search/Test/Unit/Model/Adapter/Mysql/Filter/AliasResolverTest.php b/vendor/magento/module-catalog-search/Test/Unit/Model/Adapter/Mysql/Filter/AliasResolverTest.php
new file mode 100644
index 0000000..7b6296b
--- /dev/null
+++ b/vendor/magento/module-catalog-search/Test/Unit/Model/Adapter/Mysql/Filter/AliasResolverTest.php
@@ -0,0 +1,68 @@
+<?php
+/**
+ * Copyright © 2013-2017 Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+namespace Magento\CatalogSearch\Test\Unit\Model\Adapter\Mysql\Filter;
+
+use Magento\CatalogSearch\Model\Search\RequestGenerator;
+use Magento\Framework\TestFramework\Unit\Helper\ObjectManager as ObjectManagerHelper;
+
+class AliasResolverTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * @var \Magento\CatalogSearch\Model\Adapter\Mysql\Filter\AliasResolver
+     */
+    private $aliasResolver;
+
+    /**
+     * @inheritDoc
+     */
+    protected function setUp()
+    {
+        $objectManagerHelper = new ObjectManagerHelper($this);
+        $this->aliasResolver = $objectManagerHelper->getObject(
+            \Magento\CatalogSearch\Model\Adapter\Mysql\Filter\AliasResolver::class,
+            []
+        );
+    }
+
+    /**
+     * @param string $field
+     * @param string $expectedAlias
+     * @dataProvider aliasDataProvider
+     */
+    public function testGetFilterAlias($field, $expectedAlias)
+    {
+        $filter = $this->getMockBuilder(\Magento\Framework\Search\Request\Filter\Term::class)
+            ->setMethods(['getField'])
+            ->disableOriginalConstructor()
+            ->getMock();
+        $filter->expects($this->once())
+            ->method('getField')
+            ->willReturn($field);
+        $this->assertSame($expectedAlias, $this->aliasResolver->getAlias($filter));
+    }
+
+    /**
+     * @return array
+     */
+    public function aliasDataProvider()
+    {
+        return [
+            'general' => [
+                'field' => 'general',
+                'alias' => 'general' . RequestGenerator::FILTER_SUFFIX,
+            ],
+            'price' => [
+                'field' => 'price',
+                'alias' => 'price_index',
+            ],
+            'category_ids' => [
+                'field' => 'category_ids',
+                'alias' => 'category_ids_index',
+            ],
+        ];
+    }
+}
diff --git a/vendor/magento/module-catalog-search/Test/Unit/Model/Adapter/Mysql/Filter/PreprocessorTest.php b/vendor/magento/module-catalog-search/Test/Unit/Model/Adapter/Mysql/Filter/PreprocessorTest.php
index 357e6d3..5609b34 100644
--- a/vendor/magento/module-catalog-search/Test/Unit/Model/Adapter/Mysql/Filter/PreprocessorTest.php
+++ b/vendor/magento/module-catalog-search/Test/Unit/Model/Adapter/Mysql/Filter/PreprocessorTest.php
@@ -6,6 +6,7 @@
 
 namespace Magento\CatalogSearch\Test\Unit\Model\Adapter\Mysql\Filter;
 
+use Magento\CatalogSearch\Model\Adapter\Mysql\Filter\AliasResolver;
 use Magento\Framework\DB\Select;
 use Magento\Framework\EntityManager\EntityMetadata;
 use Magento\Framework\Search\Request\FilterInterface;
@@ -18,9 +19,9 @@ use PHPUnit_Framework_MockObject_MockObject as MockObject;
 class PreprocessorTest extends \PHPUnit_Framework_TestCase
 {
     /**
-     * @var \Magento\CatalogSearch\Model\Search\TableMapper|\PHPUnit_Framework_MockObject_MockObject
+     * @var AliasResolver|\PHPUnit_Framework_MockObject_MockObject
      */
-    private $tableMapper;
+    private $aliasResolver;
 
     /**
      * @var \Magento\Framework\DB\Adapter\AdapterInterface|MockObject
@@ -81,38 +82,38 @@ class PreprocessorTest extends \PHPUnit_Framework_TestCase
     {
         $objectManagerHelper = new ObjectManagerHelper($this);
 
-        $this->conditionManager = $this->getMockBuilder('\Magento\Framework\Search\Adapter\Mysql\ConditionManager')
+        $this->conditionManager = $this->getMockBuilder(\Magento\Framework\Search\Adapter\Mysql\ConditionManager::class)
             ->disableOriginalConstructor()
             ->setMethods(['wrapBrackets'])
             ->getMock();
-        $this->scopeResolver = $this->getMockBuilder('\Magento\Framework\App\ScopeResolverInterface')
+        $this->scopeResolver = $this->getMockBuilder(\Magento\Framework\App\ScopeResolverInterface::class)
             ->disableOriginalConstructor()
             ->setMethods(['getScope'])
             ->getMockForAbstractClass();
-        $this->scope = $this->getMockBuilder('\Magento\Framework\App\ScopeInterface')
+        $this->scope = $this->getMockBuilder(\Magento\Framework\App\ScopeInterface::class)
             ->disableOriginalConstructor()
             ->setMethods(['getId'])
             ->getMockForAbstractClass();
         $this->scopeResolver->expects($this->any())
             ->method('getScope')
             ->will($this->returnValue($this->scope));
-        $this->config = $this->getMockBuilder('\Magento\Eav\Model\Config')
+        $this->config = $this->getMockBuilder(\Magento\Eav\Model\Config::class)
             ->disableOriginalConstructor()
             ->setMethods(['getAttribute'])
             ->getMock();
-        $this->attribute = $this->getMockBuilder('\Magento\Eav\Model\Entity\Attribute\AbstractAttribute')
+        $this->attribute = $this->getMockBuilder(\Magento\Eav\Model\Entity\Attribute\AbstractAttribute::class)
             ->disableOriginalConstructor()
             ->setMethods(['getBackendTable', 'isStatic', 'getAttributeId', 'getAttributeCode', 'getFrontendInput'])
             ->getMockForAbstractClass();
-        $this->resource = $resource = $this->getMockBuilder('\Magento\Framework\App\ResourceConnection')
+        $this->resource = $resource = $this->getMockBuilder(\Magento\Framework\App\ResourceConnection::class)
             ->disableOriginalConstructor()
             ->setMethods(['getConnection', 'getTableName'])
             ->getMock();
-        $this->connection = $this->getMockBuilder('\Magento\Framework\DB\Adapter\AdapterInterface')
+        $this->connection = $this->getMockBuilder(\Magento\Framework\DB\Adapter\AdapterInterface::class)
             ->disableOriginalConstructor()
             ->setMethods(['select', 'getIfNullSql', 'quote'])
             ->getMockForAbstractClass();
-        $this->select = $this->getMockBuilder('\Magento\Framework\DB\Select')
+        $this->select = $this->getMockBuilder(\Magento\Framework\DB\Select::class)
             ->disableOriginalConstructor()
             ->setMethods(['from', 'join', 'where', '__toString', 'joinLeft', 'columns', 'having'])
             ->getMock();
@@ -125,7 +126,7 @@ class PreprocessorTest extends \PHPUnit_Framework_TestCase
         $resource->expects($this->atLeastOnce())
             ->method('getConnection')
             ->will($this->returnValue($this->connection));
-        $this->filter = $this->getMockBuilder('\Magento\Framework\Search\Request\FilterInterface')
+        $this->filter = $this->getMockBuilder(\Magento\Framework\Search\Request\FilterInterface::class)
             ->disableOriginalConstructor()
             ->setMethods(['getField', 'getValue', 'getType'])
             ->getMockForAbstractClass();
@@ -141,7 +142,7 @@ class PreprocessorTest extends \PHPUnit_Framework_TestCase
                 )
             );
 
-        $this->tableMapper = $this->getMockBuilder('\Magento\CatalogSearch\Model\Search\TableMapper')
+        $this->aliasResolver = $this->getMockBuilder(AliasResolver::class)
             ->disableOriginalConstructor()
             ->getMock();
         $this->metadataPoolMock = $this->getMockBuilder(\Magento\Framework\EntityManager\MetadataPool::class)
@@ -156,7 +157,7 @@ class PreprocessorTest extends \PHPUnit_Framework_TestCase
         $metadata->expects($this->any())->method('getLinkField')->willReturn('entity_id');
 
         $this->target = $objectManagerHelper->getObject(
-            'Magento\CatalogSearch\Model\Adapter\Mysql\Filter\Preprocessor',
+            \Magento\CatalogSearch\Model\Adapter\Mysql\Filter\Preprocessor::class,
             [
                 'conditionManager' => $this->conditionManager,
                 'scopeResolver' => $this->scopeResolver,
@@ -164,7 +165,7 @@ class PreprocessorTest extends \PHPUnit_Framework_TestCase
                 'resource' => $resource,
                 'attributePrefix' => 'attr_',
                 'metadataPool' => $this->metadataPoolMock,
-                'tableMapper' => $this->tableMapper,
+                'aliasResolver' => $this->aliasResolver,
             ]
         );
     }
@@ -234,7 +235,7 @@ class PreprocessorTest extends \PHPUnit_Framework_TestCase
 
         $this->attribute->method('getAttributeCode')
             ->willReturn('static_attribute');
-        $this->tableMapper->expects($this->once())->method('getMappingAlias')
+        $this->aliasResolver->expects($this->once())->method('getAlias')
             ->willReturn('attr_table_alias');
         $this->filter->expects($this->exactly(3))
             ->method('getField')
@@ -272,7 +273,7 @@ class PreprocessorTest extends \PHPUnit_Framework_TestCase
             ->method('getFrontendInput')
             ->willReturn($frontendInput);
 
-        $this->tableMapper->expects($this->once())->method('getMappingAlias')
+        $this->aliasResolver->expects($this->once())->method('getAlias')
             ->willReturn('termAttrAlias');
 
         $this->filter->expects($this->exactly(3))
@@ -280,7 +281,7 @@ class PreprocessorTest extends \PHPUnit_Framework_TestCase
             ->willReturn('termField');
         $this->filter->expects($this->exactly(2))
             ->method('getValue')
-        ->willReturn($fieldValue);
+            ->willReturn($fieldValue);
 
         $this->connection->expects($this->atLeastOnce())->method('quote')->willReturnArgument(0);
         $actualResult = $this->target->process($this->filter, $isNegation, 'This filter is not depends on used query');
diff --git a/vendor/magento/module-catalog-search/Test/Unit/Model/Search/FilterMapper/FilterContextTest.php b/vendor/magento/module-catalog-search/Test/Unit/Model/Search/FilterMapper/FilterContextTest.php
new file mode 100644
index 0000000..1e42d6a
--- /dev/null
+++ b/vendor/magento/module-catalog-search/Test/Unit/Model/Search/FilterMapper/FilterContextTest.php
@@ -0,0 +1,236 @@
+<?php
+/**
+ * Copyright © 2013-2017 Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+namespace Magento\CatalogSearch\Test\Unit\Model\Search\FilterMapper;
+
+use Magento\Catalog\Model\ResourceModel\Eav\Attribute;
+use Magento\CatalogSearch\Model\Adapter\Mysql\Filter\AliasResolver;
+use Magento\CatalogSearch\Model\Search\FilterMapper\ExclusionStrategy;
+use Magento\CatalogSearch\Model\Search\FilterMapper\FilterContext;
+use Magento\CatalogSearch\Model\Search\FilterMapper\StaticAttributeStrategy;
+use Magento\CatalogSearch\Model\Search\FilterMapper\TermDropdownStrategy;
+use Magento\Eav\Model\Entity\Attribute\AbstractAttribute;
+use Magento\Framework\Search\Request\FilterInterface;
+use Magento\Framework\TestFramework\Unit\Helper\ObjectManager;
+
+class FilterContextTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * @var FilterContext|\PHPUnit_Framework_MockObject_MockObject
+     */
+    private $filterContext;
+
+    /**
+     * @var AliasResolver|\PHPUnit_Framework_MockObject_MockObject
+     */
+    private $aliasResolver;
+
+    /**
+     * @var \Magento\Eav\Model\Config|\PHPUnit_Framework_MockObject_MockObject
+     */
+    private $eavConfig;
+
+    /**
+     * @var ExclusionStrategy|\PHPUnit_Framework_MockObject_MockObject
+     */
+    private $exclusionStrategy;
+
+    /**
+     * @var TermDropdownStrategy|\PHPUnit_Framework_MockObject_MockObject
+     */
+    private $termDropdownStrategy;
+
+    /**
+     * @var StaticAttributeStrategy|\PHPUnit_Framework_MockObject_MockObject
+     */
+    private $staticAttributeStrategy;
+
+    /**
+     * @var \Magento\Framework\DB\Select
+     */
+    private $select;
+
+    /**
+     * @inheritDoc
+     */
+    protected function setUp()
+    {
+        $this->eavConfig = $this->getMockBuilder(\Magento\Eav\Model\Config::class)
+            ->disableOriginalConstructor()
+            ->setMethods(['getAttribute'])
+            ->getMock();
+        $this->aliasResolver = $this->getMockBuilder(
+            AliasResolver::class
+        )
+            ->disableOriginalConstructor()
+            ->setMethods(['getAlias'])
+            ->getMock();
+        $this->exclusionStrategy = $this->getMockBuilder(ExclusionStrategy::class)
+            ->disableOriginalConstructor()
+            ->setMethods(['apply'])
+            ->getMock();
+        $this->termDropdownStrategy = $this->getMockBuilder(TermDropdownStrategy::class)
+            ->disableOriginalConstructor()
+            ->setMethods(['apply'])
+            ->getMock();
+        $this->staticAttributeStrategy = $this->getMockBuilder(StaticAttributeStrategy::class)
+            ->disableOriginalConstructor()
+            ->setMethods(['apply'])
+            ->getMock();
+        $this->select = $this->getMockBuilder(\Magento\Framework\DB\Select::class)
+            ->disableOriginalConstructor()
+            ->setMethods([])
+            ->getMock();
+        $objectManager = new ObjectManager($this);
+        $this->filterContext = $objectManager->getObject(
+            FilterContext::class,
+            [
+                'eavConfig' => $this->eavConfig,
+                'aliasResolver' => $this->aliasResolver,
+                'exclusionStrategy' => $this->exclusionStrategy,
+                'termDropdownStrategy' => $this->termDropdownStrategy,
+                'staticAttributeStrategy' => $this->staticAttributeStrategy,
+            ]
+        );
+    }
+
+    public function testApplyOnExclusionFilter()
+    {
+        $filter = $this->createFilterMock();
+        $this->exclusionStrategy->expects($this->once())
+            ->method('apply')
+            ->with($filter, $this->select)
+            ->willReturn(true);
+        $this->eavConfig->expects($this->never())->method('getAttribute');
+        $this->assertTrue($this->filterContext->apply($filter, $this->select));
+    }
+
+    public function testApplyFilterWithoutAttribute()
+    {
+        $filter = $this->createFilterMock('some_field');
+        $this->exclusionStrategy->expects($this->once())
+            ->method('apply')
+            ->with($filter, $this->select)
+            ->willReturn(false);
+        $this->eavConfig->expects($this->once())
+            ->method('getAttribute')
+            ->with(\Magento\Catalog\Model\Product::ENTITY, 'some_field')
+            ->willReturn(null);
+        $this->assertFalse($this->filterContext->apply($filter, $this->select));
+    }
+
+    public function testApplyOnTermFilterBySelect()
+    {
+        $filter = $this->createFilterMock('select_field', FilterInterface::TYPE_TERM);
+        $attribute = $this->createAttributeMock('select');
+        $this->eavConfig->expects($this->once())
+            ->method('getAttribute')
+            ->with(\Magento\Catalog\Model\Product::ENTITY, 'select_field')
+            ->willReturn($attribute);
+        $this->exclusionStrategy->expects($this->once())
+            ->method('apply')
+            ->with($filter, $this->select)
+            ->willReturn(false);
+        $this->termDropdownStrategy->expects($this->once())
+            ->method('apply')
+            ->with($filter, $this->select)
+            ->willReturn(true);
+        $this->assertTrue($this->filterContext->apply($filter, $this->select));
+    }
+
+    public function testApplyOnTermFilterByMultiSelect()
+    {
+        $filter = $this->createFilterMock('multiselect_field', FilterInterface::TYPE_TERM);
+        $attribute = $this->createAttributeMock('multiselect');
+        $this->eavConfig->expects($this->once())
+            ->method('getAttribute')
+            ->with(\Magento\Catalog\Model\Product::ENTITY, 'multiselect_field')
+            ->willReturn($attribute);
+        $this->exclusionStrategy->expects($this->once())
+            ->method('apply')
+            ->with($filter, $this->select)
+            ->willReturn(false);
+        $this->termDropdownStrategy->expects($this->once())
+            ->method('apply')
+            ->with($filter, $this->select)
+            ->willReturn(true);
+        $this->assertTrue($this->filterContext->apply($filter, $this->select));
+    }
+
+    public function testApplyOnTermFilterByStaticAttribute()
+    {
+        $filter = $this->createFilterMock('multiselect_field', FilterInterface::TYPE_TERM);
+        $attribute = $this->createAttributeMock('text', AbstractAttribute::TYPE_STATIC);
+        $this->eavConfig->expects($this->once())
+            ->method('getAttribute')
+            ->with(\Magento\Catalog\Model\Product::ENTITY, 'multiselect_field')
+            ->willReturn($attribute);
+        $this->exclusionStrategy->expects($this->once())
+            ->method('apply')
+            ->with($filter, $this->select)
+            ->willReturn(false);
+        $this->staticAttributeStrategy->expects($this->once())
+            ->method('apply')
+            ->with($filter, $this->select)
+            ->willReturn(true);
+        $this->assertTrue($this->filterContext->apply($filter, $this->select));
+    }
+
+    public function testApplyOnTermFilterByUnknownAttributeType()
+    {
+        $filter = $this->createFilterMock('multiselect_field', FilterInterface::TYPE_TERM);
+        $attribute = $this->createAttributeMock('text', 'text');
+        $this->eavConfig->expects($this->once())
+            ->method('getAttribute')
+            ->with(\Magento\Catalog\Model\Product::ENTITY, 'multiselect_field')
+            ->willReturn($attribute);
+        $this->exclusionStrategy->expects($this->once())
+            ->method('apply')
+            ->with($filter, $this->select)
+            ->willReturn(false);
+        $this->assertFalse($this->filterContext->apply($filter, $this->select));
+    }
+
+    /**
+     * @param string $field
+     * @param string $type
+     * @return FilterInterface|\PHPUnit_Framework_MockObject_MockObject
+     */
+    private function createFilterMock($field = null, $type = null)
+    {
+        $filter = $this->getMockBuilder(FilterInterface::class)
+            ->setMethods(['getField', 'getType'])
+            ->getMockForAbstractClass();
+        $filter->expects($this->any())
+            ->method('getField')
+            ->willReturn($field);
+        $filter->expects($this->any())
+            ->method('getType')
+            ->willReturn($type);
+
+        return $filter;
+    }
+
+    /**
+     * @param string|null $frontendInput
+     * @param string|null $backendType
+     * @return Attribute|\PHPUnit_Framework_MockObject_MockObject
+     */
+    private function createAttributeMock($frontendInput = null, $backendType = null)
+    {
+        $attribute = $this->getMockBuilder(Attribute::class)
+            ->disableOriginalConstructor()
+            ->setMethods(['getFrontendInput', 'getBackendType'])
+            ->getMock();
+        $attribute->expects($this->any())
+            ->method('getFrontendInput')
+            ->willReturn($frontendInput);
+        $attribute->expects($this->any())
+            ->method('getBackendType')
+            ->willReturn($backendType);
+        return $attribute;
+    }
+}
diff --git a/vendor/magento/module-catalog-search/Test/Unit/Model/Search/TableMapperTest.php b/vendor/magento/module-catalog-search/Test/Unit/Model/Search/TableMapperTest.php
index f0200c1..f4dfb61 100644
--- a/vendor/magento/module-catalog-search/Test/Unit/Model/Search/TableMapperTest.php
+++ b/vendor/magento/module-catalog-search/Test/Unit/Model/Search/TableMapperTest.php
@@ -6,6 +6,9 @@
 
 namespace Magento\CatalogSearch\Test\Unit\Model\Search;
 
+use Magento\Catalog\Model\ResourceModel\Product\Attribute\Collection;
+use Magento\Catalog\Model\ResourceModel\Product\Attribute\CollectionFactory;
+use Magento\CatalogSearch\Model\Adapter\Mysql\Filter\AliasResolver;
 use Magento\Framework\Search\Request\FilterInterface;
 use Magento\Framework\Search\Request\QueryInterface;
 use \Magento\Framework\TestFramework\Unit\Helper\ObjectManager;
@@ -16,11 +19,18 @@ use \Magento\Framework\TestFramework\Unit\Helper\ObjectManager;
  */
 class TableMapperTest extends \PHPUnit_Framework_TestCase
 {
-    const WEBSITE_ID = 4512;
-    const STORE_ID = 2514;
+    /**
+     * @var AliasResolver|\PHPUnit_Framework_MockObject_MockObject
+     */
+    private $aliasResolver;
+
+    /**
+     * @var \Magento\Eav\Model\Config|\PHPUnit_Framework_MockObject_MockObject
+     */
+    private $eavConfig;
 
     /**
-     * @var \Magento\Catalog\Model\ResourceModel\Product\Attribute\Collection|\PHPUnit_Framework_MockObject_MockObject
+     * @var Collection|\PHPUnit_Framework_MockObject_MockObject
      */
     private $attributeCollection;
 
@@ -55,11 +65,6 @@ class TableMapperTest extends \PHPUnit_Framework_TestCase
     private $resource;
 
     /**
-     * @var \Magento\Store\Api\Data\StoreInterface|\PHPUnit_Framework_MockObject_MockObject
-     */
-    private $store;
-
-    /**
      * @var \Magento\CatalogSearch\Model\Search\TableMapper
      */
     private $target;
@@ -68,78 +73,67 @@ class TableMapperTest extends \PHPUnit_Framework_TestCase
     {
         $objectManager = new ObjectManager($this);
 
-        $this->connection = $this->getMockBuilder('\Magento\Framework\DB\Adapter\AdapterInterface')
+        $this->connection = $this->getMockBuilder(\Magento\Framework\DB\Adapter\AdapterInterface::class)
             ->disableOriginalConstructor()
             ->getMock();
-        $this->connection->expects($this->any())
-            ->method('quoteInto')
-            ->willReturnCallback(
-                function ($query, $expression) {
-                    return str_replace('?', $expression, $query);
-                }
-            );
-
-        $this->resource = $this->getMockBuilder('\Magento\Framework\App\ResourceConnection')
+        $this->connection->expects($this->never())->method('quoteInto');
+
+        $this->resource = $this->getMockBuilder(\Magento\Framework\App\ResourceConnection::class)
             ->disableOriginalConstructor()
             ->getMock();
-        $this->resource->method('getTableName')
-            ->willReturnCallback(
-                function ($table) {
-                    return 'prefix_' . $table;
-                }
-            );
-        $this->resource->expects($this->any())
-            ->method('getConnection')
-            ->willReturn($this->connection);
-
-        $this->website = $this->getMockBuilder('\Magento\Store\Api\Data\WebsiteInterface')
-            ->disableOriginalConstructor()
-            ->getMockForAbstractClass();
-        $this->website->expects($this->any())
-            ->method('getId')
-            ->willReturn(self::WEBSITE_ID);
-        $this->store = $this->getMockBuilder('\Magento\Store\Api\Data\StoreInterface')
+        $this->resource->expects($this->never())->method('getTableName');
+        $this->resource->expects($this->never())->method('getConnection');
+
+        $this->website = $this->getMockBuilder(\Magento\Store\Api\Data\WebsiteInterface::class)
             ->disableOriginalConstructor()
             ->getMockForAbstractClass();
-        $this->store->expects($this->any())
-            ->method('getId')
-            ->willReturn(self::STORE_ID);
-        $this->storeManager = $this->getMockBuilder('\Magento\Store\Model\StoreManagerInterface')
+        $this->website->expects($this->never())->method('getId');
+
+        $this->storeManager = $this->getMockBuilder(\Magento\Store\Model\StoreManagerInterface::class)
             ->disableOriginalConstructor()
             ->getMock();
-        $this->storeManager->expects($this->any())
-            ->method('getWebsite')
-            ->willReturn($this->website);
-        $this->storeManager->expects($this->any())
-            ->method('getStore')
-            ->willReturn($this->store);
-        $this->attributeCollection = $this->getMockBuilder(
-            '\Magento\Catalog\Model\ResourceModel\Product\Attribute\Collection'
-        )
+        $this->storeManager->expects($this->never())->method('getWebsite');
+        $this->storeManager->expects($this->never())->method('getStore');
+
+        $this->attributeCollection = $this->getMockBuilder(Collection::class)
             ->disableOriginalConstructor()
             ->getMock();
-        $attributeCollectionFactory = $this->getMockBuilder(
-            '\Magento\Catalog\Model\ResourceModel\Product\Attribute\CollectionFactory'
-        )
+        $attributeCollectionFactory = $this->getMockBuilder(CollectionFactory::class)
             ->setMethods(['create'])
             ->disableOriginalConstructor()
             ->getMock();
-        $attributeCollectionFactory->expects($this->once())
-            ->method('create')
-            ->willReturn($this->attributeCollection);
+        $attributeCollectionFactory->expects($this->never())
+            ->method('create');
+
+        $this->eavConfig = $this->getMockBuilder(\Magento\Eav\Model\Config::class)
+            ->setMethods(['getAttribute'])
+            ->disableOriginalConstructor()
+            ->getMock();
+
+        $this->aliasResolver = $this->getMockBuilder(AliasResolver::class)
+            ->disableOriginalConstructor()
+            ->getMock();
+        $this->aliasResolver->expects($this->any())
+            ->method('getAlias')
+            ->willReturnCallback(function (FilterInterface $filter) {
+                return $filter->getField() . '_alias';
+            });
+
         $this->target = $objectManager->getObject(
-            '\Magento\CatalogSearch\Model\Search\TableMapper',
+            \Magento\CatalogSearch\Model\Search\TableMapper::class,
             [
                 'resource' => $this->resource,
                 'storeManager' => $this->storeManager,
-                'attributeCollectionFactory' => $attributeCollectionFactory
+                'attributeCollectionFactory' => $attributeCollectionFactory,
+                'eavConfig' => $this->eavConfig,
+                'aliasResolver' => $this->aliasResolver,
             ]
         );
 
-        $this->select = $this->getMockBuilder('\Magento\Framework\DB\Select')
+        $this->select = $this->getMockBuilder(\Magento\Framework\DB\Select::class)
             ->disableOriginalConstructor()
             ->getMock();
-        $this->request = $this->getMockBuilder('\Magento\Framework\Search\RequestInterface')
+        $this->request = $this->getMockBuilder(\Magento\Framework\Search\RequestInterface::class)
             ->disableOriginalConstructor()
             ->getMock();
     }
@@ -151,14 +145,7 @@ class TableMapperTest extends \PHPUnit_Framework_TestCase
         $this->request->expects($this->once())
             ->method('getQuery')
             ->willReturn($query);
-        $this->select->expects($this->once())
-            ->method('joinLeft')
-            ->with(
-                ['price_index' => 'prefix_catalog_product_index_price'],
-                'search_index.entity_id = price_index.entity_id AND price_index.website_id = ' . self::WEBSITE_ID,
-                []
-            )
-            ->willReturnSelf();
+
         $select = $this->target->addTables($this->select, $this->request);
         $this->assertEquals($this->select, $select, 'Returned results isn\'t equal to passed select');
     }
@@ -167,18 +154,10 @@ class TableMapperTest extends \PHPUnit_Framework_TestCase
     {
         $priceFilter = $this->createRangeFilter('static');
         $query = $this->createFilterQuery($priceFilter);
-        $this->createAttributeMock('static', 'static', 'backend_table', 0, 'select');
         $this->request->expects($this->once())
             ->method('getQuery')
             ->willReturn($query);
-        $this->select->expects($this->once())
-            ->method('joinLeft')
-            ->with(
-                ['static_filter' => 'backend_table'],
-                'search_index.entity_id = static_filter.entity_id',
-                null
-            )
-            ->willReturnSelf();
+
         $select = $this->target->addTables($this->select, $this->request);
         $this->assertEquals($this->select, $select, 'Returned results isn\'t equal to passed select');
     }
@@ -190,46 +169,25 @@ class TableMapperTest extends \PHPUnit_Framework_TestCase
         $this->request->expects($this->once())
             ->method('getQuery')
             ->willReturn($query);
-        $this->select->expects($this->once())
-            ->method('joinLeft')
-            ->with(
-                ['category_ids_index' => 'prefix_catalog_category_product_index'],
-                'search_index.entity_id = category_ids_index.product_id',
-                []
-            )
-            ->willReturnSelf();
+
         $select = $this->target->addTables($this->select, $this->request);
         $this->assertEquals($this->select, $select, 'Returned results isn\'t equal to passed select');
     }
 
     public function testAddTermFilter()
     {
-        $this->createAttributeMock('color', null, null, 132, 'select', 0);
         $categoryIdsFilter = $this->createTermFilter('color');
         $query = $this->createFilterQuery($categoryIdsFilter);
         $this->request->expects($this->once())
             ->method('getQuery')
             ->willReturn($query);
-        $this->select->expects($this->once())
-            ->method('joinLeft')
-            ->with(
-                ['color_filter' => 'prefix_catalog_product_index_eav'],
-                'search_index.entity_id = color_filter.entity_id'
-                . ' AND color_filter.attribute_id = 132'
-                . ' AND color_filter.store_id = 2514',
-                []
-            )
-            ->willReturnSelf();
+
         $select = $this->target->addTables($this->select, $this->request);
         $this->assertEquals($this->select, $select, 'Returned results isn\'t equal to passed select');
     }
 
     public function testAddBoolQueryWithTermFiltersInside()
     {
-        $this->createAttributeMock('must1', null, null, 101, 'select', 0);
-        $this->createAttributeMock('should1', null, null, 102, 'select', 1);
-        $this->createAttributeMock('mustNot1', null, null, 103, 'select', 2);
-
         $query = $this->createBoolQuery(
             [
                 $this->createFilterQuery($this->createTermFilter('must1')),
@@ -244,45 +202,13 @@ class TableMapperTest extends \PHPUnit_Framework_TestCase
         $this->request->expects($this->once())
             ->method('getQuery')
             ->willReturn($query);
-        $this->select->expects($this->at(0))
-            ->method('joinLeft')
-            ->with(
-                ['must1_filter' => 'prefix_catalog_product_index_eav'],
-                'search_index.entity_id = must1_filter.entity_id'
-                . ' AND must1_filter.attribute_id = 101'
-                . ' AND must1_filter.store_id = 2514',
-                []
-            )
-            ->willReturnSelf();
-        $this->select->expects($this->at(1))
-            ->method('joinLeft')
-            ->with(
-                ['should1_filter' => 'prefix_catalog_product_index_eav'],
-                'search_index.entity_id = should1_filter.entity_id'
-                . ' AND should1_filter.attribute_id = 102'
-                . ' AND should1_filter.store_id = 2514',
-                []
-            )
-            ->willReturnSelf();
-        $this->select->expects($this->at(2))
-            ->method('joinLeft')
-            ->with(
-                ['mustNot1_filter' => 'prefix_catalog_product_index_eav'],
-                'search_index.entity_id = mustNot1_filter.entity_id'
-                . ' AND mustNot1_filter.attribute_id = 103'
-                . ' AND mustNot1_filter.store_id = 2514',
-                []
-            )
-            ->willReturnSelf();
+
         $select = $this->target->addTables($this->select, $this->request);
         $this->assertEquals($this->select, $select, 'Returned results isn\'t equal to passed select');
     }
 
     public function testAddBoolQueryWithTermAndPriceFiltersInside()
     {
-        $this->createAttributeMock('must1', null, null, 101, 'select', 0);
-        $this->createAttributeMock('should1', null, null, 102, 'select', 1);
-        $this->createAttributeMock('mustNot1', null, null, 103, 'select', 2);
         $query = $this->createBoolQuery(
             [
                 $this->createFilterQuery($this->createTermFilter('must1')),
@@ -298,53 +224,13 @@ class TableMapperTest extends \PHPUnit_Framework_TestCase
         $this->request->expects($this->once())
             ->method('getQuery')
             ->willReturn($query);
-        $this->select->expects($this->at(0))
-            ->method('joinLeft')
-            ->with(
-                ['must1_filter' => 'prefix_catalog_product_index_eav'],
-                'search_index.entity_id = must1_filter.entity_id'
-                . ' AND must1_filter.attribute_id = 101'
-                . ' AND must1_filter.store_id = 2514',
-                []
-            )
-            ->willReturnSelf();
-        $this->select->expects($this->at(1))
-            ->method('joinLeft')
-            ->with(
-                ['price_index' => 'prefix_catalog_product_index_price'],
-                'search_index.entity_id = price_index.entity_id AND price_index.website_id = ' . self::WEBSITE_ID,
-                []
-            )
-            ->willReturnSelf();
-        $this->select->expects($this->at(2))
-            ->method('joinLeft')
-            ->with(
-                ['should1_filter' => 'prefix_catalog_product_index_eav'],
-                'search_index.entity_id = should1_filter.entity_id'
-                . ' AND should1_filter.attribute_id = 102'
-                . ' AND should1_filter.store_id = 2514',
-                []
-            )
-            ->willReturnSelf();
-        $this->select->expects($this->at(3))
-            ->method('joinLeft')
-            ->with(
-                ['mustNot1_filter' => 'prefix_catalog_product_index_eav'],
-                'search_index.entity_id = mustNot1_filter.entity_id'
-                . ' AND mustNot1_filter.attribute_id = 103'
-                . ' AND mustNot1_filter.store_id = 2514',
-                []
-            )
-            ->willReturnSelf();
+
         $select = $this->target->addTables($this->select, $this->request);
         $this->assertEquals($this->select, $select, 'Returned results isn\'t equal to passed select');
     }
 
     public function testAddBoolFilterWithTermFiltersInside()
     {
-        $this->createAttributeMock('must1', null, null, 101, 'select', 0);
-        $this->createAttributeMock('should1', null, null, 102, 'select', 1);
-        $this->createAttributeMock('mustNot1', null, null, 103, 'select', 2);
         $query = $this->createFilterQuery(
             $this->createBoolFilter(
                 [
@@ -361,45 +247,13 @@ class TableMapperTest extends \PHPUnit_Framework_TestCase
         $this->request->expects($this->once())
             ->method('getQuery')
             ->willReturn($query);
-        $this->select->expects($this->at(0))
-            ->method('joinLeft')
-            ->with(
-                ['must1_filter' => 'prefix_catalog_product_index_eav'],
-                'search_index.entity_id = must1_filter.entity_id'
-                . ' AND must1_filter.attribute_id = 101'
-                . ' AND must1_filter.store_id = 2514',
-                []
-            )
-            ->willReturnSelf();
-        $this->select->expects($this->at(1))
-            ->method('joinLeft')
-            ->with(
-                ['should1_filter' => 'prefix_catalog_product_index_eav'],
-                'search_index.entity_id = should1_filter.entity_id'
-                . ' AND should1_filter.attribute_id = 102'
-                . ' AND should1_filter.store_id = 2514',
-                []
-            )
-            ->willReturnSelf();
-        $this->select->expects($this->at(2))
-            ->method('joinLeft')
-            ->with(
-                ['mustNot1_filter' => 'prefix_catalog_product_index_eav'],
-                'search_index.entity_id = mustNot1_filter.entity_id'
-                . ' AND mustNot1_filter.attribute_id = 103'
-                . ' AND mustNot1_filter.store_id = 2514',
-                []
-            )
-            ->willReturnSelf();
+
         $select = $this->target->addTables($this->select, $this->request);
         $this->assertEquals($this->select, $select, 'Returned results isn\'t equal to passed select');
     }
 
     public function testAddBoolFilterWithBoolFiltersInside()
     {
-        $this->createAttributeMock('must1', null, null, 101, 'select', 0);
-        $this->createAttributeMock('should1', null, null, 102, 'select', 1);
-        $this->createAttributeMock('mustNot1', null, null, 103, 'select', 2);
         $query = $this->createFilterQuery(
             $this->createBoolFilter(
                 [
@@ -416,36 +270,7 @@ class TableMapperTest extends \PHPUnit_Framework_TestCase
         $this->request->expects($this->once())
             ->method('getQuery')
             ->willReturn($query);
-        $this->select->expects($this->at(0))
-            ->method('joinLeft')
-            ->with(
-                ['must1_filter' => 'prefix_catalog_product_index_eav'],
-                'search_index.entity_id = must1_filter.entity_id'
-                . ' AND must1_filter.attribute_id = 101'
-                . ' AND must1_filter.store_id = 2514',
-                []
-            )
-            ->willReturnSelf();
-        $this->select->expects($this->at(1))
-            ->method('joinLeft')
-            ->with(
-                ['should1_filter' => 'prefix_catalog_product_index_eav'],
-                'search_index.entity_id = should1_filter.entity_id'
-                . ' AND should1_filter.attribute_id = 102'
-                . ' AND should1_filter.store_id = 2514',
-                []
-            )
-            ->willReturnSelf();
-        $this->select->expects($this->at(2))
-            ->method('joinLeft')
-            ->with(
-                ['mustNot1_filter' => 'prefix_catalog_product_index_eav'],
-                'search_index.entity_id = mustNot1_filter.entity_id'
-                . ' AND mustNot1_filter.attribute_id = 103'
-                . ' AND mustNot1_filter.store_id = 2514',
-                []
-            )
-            ->willReturnSelf();
+
         $select = $this->target->addTables($this->select, $this->request);
         $this->assertEquals($this->select, $select, 'Returned results isn\'t equal to passed select');
     }
@@ -456,13 +281,14 @@ class TableMapperTest extends \PHPUnit_Framework_TestCase
      */
     private function createFilterQuery($filter)
     {
-        $query = $this->getMockBuilder('\Magento\Framework\Search\Request\Query\Filter')
+        $query = $this->getMockBuilder(\Magento\Framework\Search\Request\Query\Filter::class)
             ->disableOriginalConstructor()
             ->getMock();
         $query->method('getType')
             ->willReturn(QueryInterface::TYPE_FILTER);
         $query->method('getReference')
             ->willReturn($filter);
+
         return $query;
     }
 
@@ -475,7 +301,7 @@ class TableMapperTest extends \PHPUnit_Framework_TestCase
      */
     private function createBoolQuery(array $must, array $should, array $mustNot)
     {
-        $query = $this->getMockBuilder('\Magento\Framework\Search\Request\Query\BoolExpression')
+        $query = $this->getMockBuilder(\Magento\Framework\Search\Request\Query\BoolExpression::class)
             ->disableOriginalConstructor()
             ->getMock();
         $query->method('getType')
@@ -486,6 +312,7 @@ class TableMapperTest extends \PHPUnit_Framework_TestCase
             ->willReturn($should);
         $query->method('getMustNot')
             ->willReturn($mustNot);
+
         return $query;
     }
 
@@ -498,7 +325,7 @@ class TableMapperTest extends \PHPUnit_Framework_TestCase
      */
     private function createBoolFilter(array $must, array $should, array $mustNot)
     {
-        $query = $this->getMockBuilder('\Magento\Framework\Search\Request\Filter\BoolExpression')
+        $query = $this->getMockBuilder(\Magento\Framework\Search\Request\Filter\BoolExpression::class)
             ->disableOriginalConstructor()
             ->getMock();
         $query->method('getType')
@@ -509,6 +336,7 @@ class TableMapperTest extends \PHPUnit_Framework_TestCase
             ->willReturn($should);
         $query->method('getMustNot')
             ->willReturn($mustNot);
+
         return $query;
     }
 
@@ -519,10 +347,11 @@ class TableMapperTest extends \PHPUnit_Framework_TestCase
     private function createRangeFilter($field)
     {
         $filter = $this->createFilterMock(
-            '\Magento\Framework\Search\Request\Filter\Range',
+            \Magento\Framework\Search\Request\Filter\Range::class,
             FilterInterface::TYPE_RANGE,
             $field
         );
+
         return $filter;
     }
 
@@ -533,10 +362,11 @@ class TableMapperTest extends \PHPUnit_Framework_TestCase
     private function createTermFilter($field)
     {
         $filter = $this->createFilterMock(
-            '\Magento\Framework\Search\Request\Filter\Term',
+            \Magento\Framework\Search\Request\Filter\Term::class,
             FilterInterface::TYPE_TERM,
             $field
         );
+
         return $filter;
     }
 
@@ -555,40 +385,7 @@ class TableMapperTest extends \PHPUnit_Framework_TestCase
             ->willReturn($type);
         $filter->method('getField')
             ->willReturn($field);
-        return $filter;
-    }
 
-    /**
-     * @param string $code
-     * @param string $backendType
-     * @param string $backendTable
-     * @param int $attributeId
-     * @param string $frontendInput
-     * @param int $positionInCollection
-     */
-    private function createAttributeMock(
-        $code,
-        $backendType = null,
-        $backendTable = null,
-        $attributeId = 120,
-        $frontendInput = 'select',
-        $positionInCollection = 0
-    ) {
-        $attribute = $this->getMockBuilder('\Magento\Catalog\Model\ResourceModel\Eav\Attribute')
-            ->setMethods(['getBackendType', 'getBackendTable', 'getId', 'getFrontendInput'])
-            ->disableOriginalConstructor()
-            ->getMock();
-        $attribute->method('getId')
-            ->willReturn($attributeId);
-        $attribute->method('getBackendType')
-            ->willReturn($backendType);
-        $attribute->method('getBackendTable')
-            ->willReturn($backendTable);
-        $attribute->method('getFrontendInput')
-            ->willReturn($frontendInput);
-        $this->attributeCollection->expects($this->at($positionInCollection))
-            ->method('getItemByColumnValue')
-            ->with('attribute_code', $code)
-            ->willReturn($attribute);
+        return $filter;
     }
 }
diff --git a/vendor/magento/module-catalog-search/etc/di.xml b/vendor/magento/module-catalog-search/etc/di.xml
index fcea9f1..3e5e949 100644
--- a/vendor/magento/module-catalog-search/etc/di.xml
+++ b/vendor/magento/module-catalog-search/etc/di.xml
@@ -11,6 +11,7 @@
     <preference for="Magento\Framework\Search\Adapter\Mysql\Filter\PreprocessorInterface" type="Magento\CatalogSearch\Model\Adapter\Mysql\Filter\Preprocessor" />
     <preference for="Magento\Framework\Search\Dynamic\DataProviderInterface" type="Magento\CatalogSearch\Model\Adapter\Mysql\Dynamic\DataProvider" />
     <preference for="Magento\Framework\Search\Adapter\OptionsInterface" type="Magento\CatalogSearch\Model\Adapter\Options" />
+    <preference for="Magento\CatalogSearch\Model\Search\FilterMapper\FilterStrategyInterface" type="Magento\CatalogSearch\Model\Search\FilterMapper\FilterContext"/>
     <type name="Magento\CatalogSearch\Model\Indexer\IndexerHandlerFactory">
         <arguments>
             <argument name="configPath" xsi:type="const">Magento\CatalogSearch\Model\ResourceModel\EngineInterface::CONFIG_ENGINE_PATH</argument>
diff --git a/vendor/magento/module-catalog/Model/ResourceModel/Product/Indexer/Eav/AbstractEav.php b/vendor/magento/module-catalog/Model/ResourceModel/Product/Indexer/Eav/AbstractEav.php
index 227b47d..7cd1c8c 100644
--- a/vendor/magento/module-catalog/Model/ResourceModel/Product/Indexer/Eav/AbstractEav.php
+++ b/vendor/magento/module-catalog/Model/ResourceModel/Product/Indexer/Eav/AbstractEav.php
@@ -197,7 +197,7 @@ abstract class AbstractEav extends \Magento\Catalog\Model\ResourceModel\Product\
         )->joinLeft(
             ['e' => $this->getTable('catalog_product_entity')],
             'e.' . $linkField .' = l.parent_id',
-            ['e.entity_id as parent_id']
+            []
         )->join(
             ['cs' => $this->getTable('store')],
             '',
@@ -205,9 +205,17 @@ abstract class AbstractEav extends \Magento\Catalog\Model\ResourceModel\Product\
         )->join(
             ['i' => $idxTable],
             'l.child_id = i.entity_id AND cs.store_id = i.store_id',
-            ['attribute_id', 'store_id', 'value']
+            []
         )->group(
-            ['parent_id', 'i.attribute_id', 'i.store_id', 'i.value']
+            ['parent_id', 'i.attribute_id', 'i.store_id', 'i.value', 'l.child_id']
+        )->columns(
+            [
+                'parent_id' => 'e.entity_id',
+                'attribute_id' => 'i.attribute_id',
+                'store_id' => 'i.store_id',
+                'value' => 'i.value',
+                'source_id' => 'l.child_id'
+            ]
         );
         if ($parentIds !== null) {
             $select->where('e.entity_id IN(?)', $parentIds);
@@ -222,7 +230,7 @@ abstract class AbstractEav extends \Magento\Catalog\Model\ResourceModel\Product\
                 'select' => $select,
                 'entity_field' => new \Zend_Db_Expr('l.parent_id'),
                 'website_field' => new \Zend_Db_Expr('cs.website_id'),
-                'store_field' => new \Zend_Db_Expr('cs.store_id')
+                'store_field' => new \Zend_Db_Expr('cs.store_id'),
             ]
         );
 
diff --git a/vendor/magento/module-catalog/Model/ResourceModel/Product/Indexer/Eav/Decimal.php b/vendor/magento/module-catalog/Model/ResourceModel/Product/Indexer/Eav/Decimal.php
index 4a45401..76127b0 100644
--- a/vendor/magento/module-catalog/Model/ResourceModel/Product/Indexer/Eav/Decimal.php
+++ b/vendor/magento/module-catalog/Model/ResourceModel/Product/Indexer/Eav/Decimal.php
@@ -85,6 +85,7 @@ class Decimal extends AbstractEav
                 'pdd.attribute_id',
                 'cs.store_id',
                 'value' => $productValueExpression,
+                'source_id' => 'cpe.entity_id',
             ]
         );
 
@@ -116,7 +117,7 @@ class Decimal extends AbstractEav
                 'select' => $select,
                 'entity_field' => new \Zend_Db_Expr('cpe.entity_id'),
                 'website_field' => new \Zend_Db_Expr('cs.website_id'),
-                'store_field' => new \Zend_Db_Expr('cs.store_id')
+                'store_field' => new \Zend_Db_Expr('cs.store_id'),
             ]
         );
 
diff --git a/vendor/magento/module-catalog/Model/ResourceModel/Product/Indexer/Eav/Source.php b/vendor/magento/module-catalog/Model/ResourceModel/Product/Indexer/Eav/Source.php
index 74e5147..1846e5a 100644
--- a/vendor/magento/module-catalog/Model/ResourceModel/Product/Indexer/Eav/Source.php
+++ b/vendor/magento/module-catalog/Model/ResourceModel/Product/Indexer/Eav/Source.php
@@ -178,6 +178,7 @@ class Source extends AbstractEav
                 'pid.attribute_id',
                 'pid.store_id',
                 'value' => $ifNullSql,
+                'pid.entity_id',
             ]
         )->where(
             'pid.attribute_id IN(?)',
@@ -200,7 +201,7 @@ class Source extends AbstractEav
                 'select' => $select,
                 'entity_field' => new \Zend_Db_Expr('pid.entity_id'),
                 'website_field' => new \Zend_Db_Expr('pid.website_id'),
-                'store_field' => new \Zend_Db_Expr('pid.store_id')
+                'store_field' => new \Zend_Db_Expr('pid.store_id'),
             ]
         );
         $query = $select->insertFromSelect($idxTable);
@@ -221,11 +222,7 @@ class Source extends AbstractEav
         $connection = $this->getConnection();
 
         // prepare multiselect attributes
-        if ($attributeId === null) {
-            $attrIds = $this->_getIndexableAttributes(true);
-        } else {
-            $attrIds = [$attributeId];
-        }
+        $attrIds = $attributeId === null ? $this->_getIndexableAttributes(true) : [$attributeId];
 
         if (!$attrIds) {
             return $this;
@@ -247,20 +244,20 @@ class Source extends AbstractEav
         $productValueExpression = $connection->getCheckSql('pvs.value_id > 0', 'pvs.value', 'pvd.value');
         $select = $connection->select()->from(
             ['pvd' => $this->getTable('catalog_product_entity_varchar')],
-            [$productIdField, 'attribute_id']
+            []
         )->join(
             ['cs' => $this->getTable('store')],
             '',
-            ['store_id']
+            []
         )->joinLeft(
             ['pvs' => $this->getTable('catalog_product_entity_varchar')],
             "pvs.{$productIdField} = pvd.{$productIdField} AND pvs.attribute_id = pvd.attribute_id"
             . ' AND pvs.store_id=cs.store_id',
-            ['value' => $productValueExpression]
+            []
         )->joinLeft(
             ['cpe' => $this->getTable('catalog_product_entity')],
             "cpe.{$productIdField} = pvd.{$productIdField}",
-            ['entity_id']
+            ['']
         )->where(
             'pvd.store_id=?',
             $connection->getIfNullSql('pvs.store_id', \Magento\Store\Model\Store::DEFAULT_STORE_ID)
@@ -272,6 +269,14 @@ class Source extends AbstractEav
             $attrIds
         )->where(
             'cpe.entity_id IS NOT NULL'
+        )->columns(
+            [
+                'entity_id' => 'cpe.entity_id',
+                'attribute_id' => 'attribute_id',
+                'store_id' => 'cs.store_id',
+                'value' => $productValueExpression,
+                'source_id' => 'cpe.entity_id',
+            ]
         );
 
         $statusCond = $connection->quoteInto('=?', ProductStatus::STATUS_ENABLED);
@@ -289,30 +294,11 @@ class Source extends AbstractEav
                 'select' => $select,
                 'entity_field' => new \Zend_Db_Expr('cpe.entity_id'),
                 'website_field' => new \Zend_Db_Expr('cs.website_id'),
-                'store_field' => new \Zend_Db_Expr('cs.store_id')
+                'store_field' => new \Zend_Db_Expr('cs.store_id'),
             ]
         );
 
-        $i = 0;
-        $data = [];
-        $query = $select->query();
-        while ($row = $query->fetch()) {
-            $values = explode(',', $row['value']);
-            foreach ($values as $valueId) {
-                if (isset($options[$row['attribute_id']][$valueId])) {
-                    $data[] = [$row['entity_id'], $row['attribute_id'], $row['store_id'], $valueId];
-                    $i++;
-                    if ($i % 10000 == 0) {
-                        $this->_saveIndexData($data);
-                        $data = [];
-                    }
-                }
-            }
-        }
-
-        $this->_saveIndexData($data);
-        unset($options);
-        unset($data);
+        $this->saveDataFromSelect($select, $options);
 
         return $this;
     }
@@ -331,13 +317,41 @@ class Source extends AbstractEav
         $connection = $this->getConnection();
         $connection->insertArray(
             $this->getIdxTable(),
-            ['entity_id', 'attribute_id', 'store_id', 'value'],
+            ['entity_id', 'attribute_id', 'store_id', 'value', 'source_id'],
             $data
         );
+
         return $this;
     }
 
     /**
+     * @param \Magento\Framework\DB\Select $select
+     * @param array $options
+     * @return void
+     */
+    private function saveDataFromSelect(\Magento\Framework\DB\Select $select, array $options)
+    {
+        $i = 0;
+        $data = [];
+        $query = $select->query();
+        while ($row = $query->fetch()) {
+            $values = explode(',', $row['value']);
+            foreach ($values as $valueId) {
+                if (isset($options[$row['attribute_id']][$valueId])) {
+                    $data[] = [$row['entity_id'], $row['attribute_id'], $row['store_id'], $valueId, $row['source_id']];
+                    $i++;
+                    if ($i % 10000 == 0) {
+                        $this->_saveIndexData($data);
+                        $data = [];
+                    }
+                }
+            }
+        }
+
+        $this->_saveIndexData($data);
+    }
+
+    /**
      * Retrieve temporary source index table name
      *
      * @param string|null $table
diff --git a/vendor/magento/module-catalog/Model/ResourceModel/Product/Indexer/Price/DefaultPrice.php b/vendor/magento/module-catalog/Model/ResourceModel/Product/Indexer/Price/DefaultPrice.php
index 4145694..fbf2ea6 100644
--- a/vendor/magento/module-catalog/Model/ResourceModel/Product/Indexer/Price/DefaultPrice.php
+++ b/vendor/magento/module-catalog/Model/ResourceModel/Product/Indexer/Price/DefaultPrice.php
@@ -368,7 +368,7 @@ class DefaultPrice extends AbstractIndexer implements PriceInterface
                 'select' => $select,
                 'entity_field' => new \Zend_Db_Expr('e.entity_id'),
                 'website_field' => new \Zend_Db_Expr('cw.website_id'),
-                'store_field' => new \Zend_Db_Expr('cs.store_id')
+                'store_field' => new \Zend_Db_Expr('cs.store_id'),
             ]
         );
 
diff --git a/vendor/magento/module-catalog/Setup/InstallSchema.php b/vendor/magento/module-catalog/Setup/InstallSchema.php
index 206bd82..4e164d5 100644
--- a/vendor/magento/module-catalog/Setup/InstallSchema.php
+++ b/vendor/magento/module-catalog/Setup/InstallSchema.php
@@ -18,6 +18,7 @@ class InstallSchema implements InstallSchemaInterface
     /**
      * {@inheritdoc}
      * @SuppressWarnings(PHPMD.ExcessiveMethodLength)
+     * @throws \Zend_Db_Exception
      */
     public function install(SchemaSetupInterface $setup, ModuleContextInterface $context)
     {
@@ -2426,7 +2427,6 @@ class InstallSchema implements InstallSchemaInterface
                 'option_id',
                 $installer->getTable('catalog_product_option'),
                 'option_id',
-                \Magento\Framework\DB\Ddl\Table::ACTION_CASCADE,
                 \Magento\Framework\DB\Ddl\Table::ACTION_CASCADE
             )
             ->setComment(
diff --git a/vendor/magento/module-catalog/Setup/UpgradeSchema.php b/vendor/magento/module-catalog/Setup/UpgradeSchema.php
index aef2501..44adfc8 100644
--- a/vendor/magento/module-catalog/Setup/UpgradeSchema.php
+++ b/vendor/magento/module-catalog/Setup/UpgradeSchema.php
@@ -32,10 +32,58 @@ class UpgradeSchema implements UpgradeSchemaInterface
         if (version_compare($context->getVersion(), '2.0.6', '<')) {
             $this->addUniqueKeyToCategoryProductTable($setup);
         }
+
+        if (version_compare($context->getVersion(), '2.1.4', '<')) {
+            $this->addSourceEntityIdToProductEavIndex($setup);
+        }
+
         $setup->endSetup();
     }
 
     /**
+     * Add the column 'source_id' to the Product EAV index tables.
+     * It allows to identify which entity was used to create value in the index.
+     * It is useful to identify original entity in a composite products.
+     *
+     * @param SchemaSetupInterface $setup
+     * @return void
+     */
+    private function addSourceEntityIdToProductEavIndex(SchemaSetupInterface $setup)
+    {
+        $tables = [
+            'catalog_product_index_eav',
+            'catalog_product_index_eav_idx',
+            'catalog_product_index_eav_tmp',
+            'catalog_product_index_eav_decimal',
+            'catalog_product_index_eav_decimal_idx',
+            'catalog_product_index_eav_decimal_tmp',
+        ];
+        $connection = $setup->getConnection();
+        foreach ($tables as $tableName) {
+            $tableName = $setup->getTable($tableName);
+            $connection->addColumn(
+                $tableName,
+                'source_id',
+                [
+                    'type' => \Magento\Framework\DB\Ddl\Table::TYPE_INTEGER,
+                    'unsigned' => true,
+                    'nullable' => false,
+                    'default' => 0,
+                    'comment' => 'Original entity Id for attribute value',
+                ]
+            );
+            $connection->dropIndex($tableName, $connection->getPrimaryKeyName($tableName));
+            $primaryKeyFields = ['entity_id', 'attribute_id', 'store_id', 'value', 'source_id'];
+            $setup->getConnection()->addIndex(
+                $tableName,
+                $connection->getIndexName($tableName, $primaryKeyFields),
+                $primaryKeyFields,
+                \Magento\Framework\DB\Adapter\AdapterInterface::INDEX_TYPE_PRIMARY
+            );
+        }
+    }
+
+    /**
      * @param SchemaSetupInterface $setup
      * @return void
      */
diff --git a/vendor/magento/module-catalog/etc/module.xml b/vendor/magento/module-catalog/etc/module.xml
index ffbd5bb..5711766 100644
--- a/vendor/magento/module-catalog/etc/module.xml
+++ b/vendor/magento/module-catalog/etc/module.xml
@@ -6,7 +6,7 @@
  */
 -->
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Module/etc/module.xsd">
-    <module name="Magento_Catalog" setup_version="2.1.3">
+    <module name="Magento_Catalog" setup_version="2.1.4">
         <sequence>
             <module name="Magento_Eav"/>
             <module name="Magento_Cms"/>
diff --git a/vendor/magento/module-gift-card/Model/ResourceModel/Indexer/Price.php b/vendor/magento/module-gift-card/Model/ResourceModel/Indexer/Price.php
index 477d636..2151ad6 100644
--- a/vendor/magento/module-gift-card/Model/ResourceModel/Indexer/Price.php
+++ b/vendor/magento/module-gift-card/Model/ResourceModel/Indexer/Price.php
@@ -116,7 +116,7 @@ class Price extends \Magento\Catalog\Model\ResourceModel\Product\Indexer\Price\D
                 'select' => $select,
                 'entity_field' => new \Zend_Db_Expr('e.entity_id'),
                 'website_field' => new \Zend_Db_Expr('cw.website_id'),
-                'store_field' => new \Zend_Db_Expr('cs.store_id')
+                'store_field' => new \Zend_Db_Expr('cs.store_id'),
             ]
         );
 
